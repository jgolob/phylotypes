#!/usr/bin/env python3

# # Objective: Decorate phylotypes with taxonomy

import argparse
import logging
import pandas as pd
import csv
import sys


def main():
    args_parser = argparse.ArgumentParser(
        description="""Find the consensus species (or best effort) for a given phylotype
        when you have a per-sequence variant taxonomic output (as from MaLiAmPi)
        """
    )
    args_parser.add_argument(
        '--phylotypes', '-p',
        help='CSV file with two columns: phylotype and sv. Represents the phylotype to sequence variant mapping',
        required=True
    )
    args_parser.add_argument(
        '--taxonomy', '-t',
        help='CSV file with per SV taxonomic assignments in long format (as generated by MaLiAmPi)',
        required=True
    )
    args_parser.add_argument(
        '--out', '-O',
        help='Output of phylotype <-> species mapping. CSV format with header of phylotype and species',
        type=argparse.FileType('wt'),
        required=True
    )
    args = args_parser.parse_args()

    logging.info("Loading SV-taxonomy in long format")
    sv_tax = pd.read_csv(args.taxonomy).rename(
        {'name': 'sv'}, axis=1
    )
    try:
        assert 'sv' in sv_tax.columns
    except AssertionError:
        logging.error("Taxonomy is missing an 'sv' column. Perhaps it is not in the correct format")
        sys.exit(-1)

    try:
        assert 'want_rank' in sv_tax.columns
    except AssertionError:
        logging.error("Taxonomy is missing a 'want_rank' column. Perhaps it is not in the correct format")
        sys.exit(-1)

    try:
        assert 'rank' in sv_tax.columns
    except AssertionError:
        logging.error("Taxonomy is missing a 'rank' column. Perhaps it is not in the correct format")
        sys.exit(-1)

    try:
        assert 'tax_name' in sv_tax.columns
    except AssertionError:
        logging.error("Taxonomy is missing a 'tax_name' column. Perhaps it is not in the correct format")
        sys.exit(-1)
    # Implicit else sv_taxonomy is correct

    logging.info("Loading phylotype <-> SV mapping")
    pt_sv_df = pd.read_csv(args.phylotypes)
    try:
        assert 'phylotype' in pt_sv_df.columns
    except AssertionError:
        logging.error("Phylotype input is missing a 'phylotype' column. Perhaps it is in the incorrect format")
        sys.exit(-1)

    try:
        assert 'sv' in pt_sv_df.columns
    except AssertionError:
        logging.error("Phylotype input is missing a 'sv' column. Perhaps it is in the incorrect format")
        sys.exit(-1)
    # Implicit else phylotypes are correct
    sv_pt = {
        r.sv: r.phylotype
        for (i, r) in
        pt_sv_df.iterrows()
    }
    # Cache all the phylotypes we are trying to name...
    all_pt = set(sv_pt.values())

    # Add the phylotype assignment to the taxonomy table
    sv_tax['phylotype'] = sv_tax.sv.apply(sv_pt.get)

    logging.info("Attempting to find a species-level taxon for each phylotype")
    # First try for species-level via majority rules
    pt_sp = {
        pt: r.tax_name
        for pt, r in 
        sv_tax[
            sv_tax['rank'] == 'species'
        ][['phylotype', 'tax_name']].groupby(
            'phylotype'
        ).value_counts().reset_index().groupby('phylotype').first().iterrows()    
    }
    # Find the remainder
    pt_no_sp = all_pt - set(pt_sp.keys())

    logging.info(f"There are {len(pt_no_sp):,d} out of {len(all_pt):,d} phylotypes without a species-level taxon.")
    # ... and do our best, noting it is not a species-level annotation by appending ' spp.'
    pt_sp.update({
        pt: f'{r.tax_name} spp.'
        for pt, r in 
        sv_tax[
            (sv_tax.want_rank == 'species') &
            (sv_tax.phylotype.apply(lambda pt: pt in pt_no_sp))
        ][['phylotype', 'tax_name']].groupby(
            'phylotype'
        ).value_counts().reset_index().groupby('phylotype').first().iterrows()    
    })

    logging.info(f'There were {len(all_pt - set(pt_sp.keys())):,d} phylotypes without any taxonomic annotation')
    logging.info("Writing output")
    out_w = csv.DictWriter(args.out, fieldnames=['phylotype', 'species'])
    out_w.writeheader()
    out_w.writerows([
        {
            'phylotype': k,
            'species': v
        } for (k, v) in pt_sp.items()
    ])
    logging.info("Done.")


if __name__ == "__main__":
    main()
